name: 'Build and Release Theater Actor'
description: 'Builds a Rust-based Theater actor and creates a GitHub release'
inputs:
  actor-name:
    description: 'Name of the actor (auto-detected if not provided)'
    required: false
  rust-toolchain:
    description: 'Rust toolchain version'
    required: false
    default: 'stable'
  wasm-target:
    description: 'WASM target'
    required: false
    default: 'wasm32-unknown-unknown'
  cargo-component-version:
    description: 'cargo-component version'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Auto-detect actor name
      id: actor-info
      shell: bash
      run: |
        ACTOR_NAME="${{ inputs.actor-name }}"
        
        # Auto-detect from Cargo.toml if not provided
        if [ -z "$ACTOR_NAME" ] && [ -f "Cargo.toml" ]; then
          ACTOR_NAME=$(grep '^name = ' Cargo.toml | head -1 | sed 's/name = "\(.*\)"/\1/')
        fi
        
        # Fallback to repository name
        if [ -z "$ACTOR_NAME" ]; then
          ACTOR_NAME=$(basename "${{ github.repository }}")
        fi
        
        echo "ACTOR_NAME=$ACTOR_NAME" >> $GITHUB_OUTPUT
        echo "Detected actor name: $ACTOR_NAME"
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        target: ${{ inputs.wasm-target }}
        override: true
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo-component
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin/cargo-component
        key: ${{ runner.os }}-cargo-component-${{ inputs.cargo-component-version }}
        
    - name: Install cargo-component
      shell: bash
      run: |
        if ! command -v cargo-component &> /dev/null; then
          if [ "${{ inputs.cargo-component-version }}" = "latest" ]; then
            cargo install cargo-component
          else
            cargo install cargo-component --version ${{ inputs.cargo-component-version }}
          fi
        fi
        
    - name: Build WASM component
      shell: bash
      run: |
        cargo component build --release --target ${{ inputs.wasm-target }}
        
    - name: Check for initial state in manifest
      id: check-state
      shell: bash
      run: |
        # Check if manifest references initial_state
        if grep -q "init_state" manifest.toml; then
          echo "HAS_INITIAL_STATE=true" >> $GITHUB_OUTPUT
          echo "Manifest includes initial_state reference"
        else
          echo "HAS_INITIAL_STATE=false" >> $GITHUB_OUTPUT
          echo "No initial_state found in manifest"
        fi
        
    - name: Prepare release assets
      shell: bash
      run: |
        # Auto-detect binary name
        WASM_FILE=$(find target/${{ inputs.wasm-target }}/release/ -name "*.wasm" -not -path "*/deps/*" | head -1)
        if [ -z "$WASM_FILE" ]; then
          BINARY_NAME="${{ steps.actor-info.outputs.ACTOR_NAME }}"
        else
          BINARY_NAME=$(basename "$WASM_FILE" .wasm)
        fi
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Prepare core assets
        cp target/${{ inputs.wasm-target }}/release/$BINARY_NAME.wasm component.wasm
        
        # Update manifest URLs
        sed -i "s|component = \".*\"|component = \"https://github.com/${{ github.repository }}/releases/download/$VERSION/component.wasm\"|" manifest.toml
        sed -i "s|version = \".*\"|version = \"$VERSION\"|" manifest.toml
        
        # Update initial_state URL if present
        if [ "${{ steps.check-state.outputs.HAS_INITIAL_STATE }}" = "true" ]; then
          sed -i "s|init_state = \".*\"|init_state = \"https://github.com/${{ github.repository }}/releases/download/$VERSION/init.json\"|" manifest.toml
        fi
